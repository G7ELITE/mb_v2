"""
Apply Plan - Aplicador de planos

Aplica planos de a√ß√£o gerados pelo orchestrador.
Inclui adapta√ß√£o por canal, envio de mensagens e rastreamento de eventos.
Suporte a idempot√™ncia via X-Idempotency-Key.
"""
from fastapi import APIRouter, Header, HTTPException, Depends
from typing import Dict, Any, List, Optional
import logging
import json
from sqlalchemy.orm import Session

from app.data.schemas import Plan, Action
from app.data.repo import IdempotencyRepository, EventRepository
from app.infra.db import get_db
from app.channels.adapter import to_telegram, to_whatsapp
from app.metrics.tracking import track_action_execution
from app.infra.logging import log_structured
from app.core.config_melhorias import normalizar_action_type, IDEMPOTENCY_HEADER
from app.core.automation_hook import get_automation_hook

router = APIRouter()
logger = logging.getLogger(__name__)


@router.post("/apply_plan")
async def apply_plan_endpoint(
    plan: Dict[str, Any], 
    x_idempotency_key: Optional[str] = Header(None, alias=IDEMPOTENCY_HEADER),
    db: Session = Depends(get_db)
):
    """
    Endpoint p√∫blico para aplicar plano de a√ß√µes.
    
    Args:
        plan: Plano de a√ß√µes a ser executado
        x_idempotency_key: Chave de idempot√™ncia opcional
        db: Sess√£o do banco de dados
        
    Returns:
        Resultado da aplica√ß√£o do plano
    """
    return await apply_plan(plan, x_idempotency_key, db)


async def apply_plan(
    plan: Dict[str, Any], 
    idempotency_key: Optional[str] = None,
    db: Optional[Session] = None
) -> Dict[str, Any]:
    """
    Aplica plano de a√ß√µes com suporte a idempot√™ncia.
    
    Args:
        plan: Plano de a√ß√µes
        idempotency_key: Chave de idempot√™ncia
        db: Sess√£o do banco (opcional)
        
    Returns:
        Resultado da aplica√ß√£o
    """
    decision_id = plan.get("decision_id", "unknown")
    actions = plan.get("actions", [])
    metadata = plan.get("metadata", {})
    
    log_structured("info", "apply_plan_start", {
        "decision_id": decision_id,
        "actions_count": len(actions),
        "has_idempotency": bool(idempotency_key)
    })
    
    # Verificar idempot√™ncia se chave fornecida
    if idempotency_key and db:
        cached_response = await check_idempotency(idempotency_key, db)
        if cached_response:
            logger.info(f"Resposta idempotente encontrada para {idempotency_key}")
            return cached_response
    
    try:
        # Executar a√ß√µes do plano
        execution_results = []
        
        for i, action in enumerate(actions):
            action_result = await execute_action(action, i, decision_id, db, metadata)
            execution_results.append(action_result)
        
        # Montar resposta final
        result = {
            "applied": True,
            "decision_id": decision_id,
            "actions_executed": len(execution_results),
            "execution_results": execution_results,
            "status": "success"
        }
        
        # Salvar resposta para idempot√™ncia
        if idempotency_key and db:
            await store_idempotency_response(idempotency_key, result, db)
        
        log_structured("info", "apply_plan_success", {
            "decision_id": decision_id,
            "actions_executed": len(execution_results)
        })
        
        return result
        
    except Exception as e:
        error_msg = str(e)
        log_structured("error", "apply_plan_error", {
            "decision_id": decision_id,
            "error": error_msg
        })
        
        error_result = {
            "applied": False,
            "decision_id": decision_id,
            "error": error_msg,
            "status": "error"
        }
        
        # Ainda salvar erro para idempot√™ncia
        if idempotency_key and db:
            await store_idempotency_response(idempotency_key, error_result, db)
        
        return error_result


async def execute_action(
    action: Dict[str, Any], 
    action_index: int, 
    decision_id: str,
    db: Optional[Session] = None,
    metadata: Optional[Dict[str, Any]] = None
) -> Dict[str, Any]:
    """
    Executa uma a√ß√£o individual do plano.
    
    Args:
        action: Defini√ß√£o da a√ß√£o
        action_index: √çndice da a√ß√£o no plano
        decision_id: ID da decis√£o
        db: Sess√£o do banco
        
    Returns:
        Resultado da execu√ß√£o da a√ß√£o
    """
    action_type_raw = action.get("type", "unknown")
    action_type = normalizar_action_type(action_type_raw)
    action_id = f"{decision_id}_action_{action_index}"
    
    log_structured("info", "action_execution_start", {
        "action_id": action_id,
        "action_type": action_type,
        "action_type_raw": action_type_raw,
        "decision_id": decision_id
    })
    
    try:
        if action_type == "send_message":
            result = await execute_send_message(action, action_id)
        elif action_type == "send_photo":
            result = await execute_send_media(action, action_id)
        elif action_type == "set_facts":
            result = await execute_set_facts(action, action_id, db, metadata)
        elif action_type == "track_event":
            result = await execute_track_event(action, action_id, db)
        elif action_type == "clear_waiting":
            result = await execute_clear_waiting(action, action_id, metadata)
        else:
            result = await execute_generic_action(action, action_id)
        
        # Rastrear execu√ß√£o da a√ß√£o
        if db:
            await track_action_execution(action_id, action_type, result, db)
        
        # Hook para expects_reply (se for send_message com sucesso)
        if action_type == "send_message" and result.get("message_sent"):
            try:
                automation_hook = get_automation_hook()
                automation_id = action.get("automation_id")
                # Extrair lead_id do metadata do plan
                lead_id = (metadata or {}).get("lead_id")
                logger.info(f"üîß [ApplyPlan] Calling automation hook: automation_id={automation_id}, lead_id={lead_id}, success={result.get('message_sent')}")
                if automation_id and lead_id:
                    await automation_hook.on_automation_sent(automation_id, lead_id, True)
                else:
                    logger.warning(f"üîß [ApplyPlan] Missing automation_id ({automation_id}) or lead_id ({lead_id}) for hook")
            except Exception as hook_error:
                logger.warning(f"Automation hook error: {str(hook_error)}")
        
        log_structured("info", "action_execution_success", {
            "action_id": action_id,
            "action_type": action_type
        })
        
        return {
            "action_id": action_id,
            "action_type": action_type,
            "status": "success",
            "result": result
        }
        
    except Exception as e:
        error_msg = str(e)
        log_structured("error", "action_execution_error", {
            "action_id": action_id,
            "action_type": action_type,
            "error": error_msg
        })
        
        return {
            "action_id": action_id,
            "action_type": action_type,
            "status": "error",
            "error": error_msg
        }


async def execute_send_message(action: Dict[str, Any], action_id: str) -> Dict[str, Any]:
    """
    Executa a√ß√£o de envio de mensagem com blindagem contra nulos.
    Nota: Esta implementa√ß√£o apenas prepara o payload - o envio real √© feito no webhook.
    
    Args:
        action: Defini√ß√£o da a√ß√£o
        action_id: ID da a√ß√£o
        
    Returns:
        Resultado do envio
    """
    # Blindagem contra nulos - normalizar dados
    action_normalizada = normalizar_action_para_envio(action)
    
    text = action_normalizada.get("text", "")
    buttons = action_normalizada.get("buttons", [])
    media = action_normalizada.get("media", [])
    
    # Adaptar para Telegram
    try:
        telegram_payload = to_telegram(action_normalizada)
    except Exception as e:
        logger.warning(f"Erro ao adaptar payload para Telegram: {str(e)}")
        telegram_payload = {"text": text}
    
    # O envio real ser√° feito pelo webhook que chamou este pipeline
    # Aqui apenas preparamos e validamos o payload
    
    return {
        "message_sent": True,  # Marca como "enviado" para o pipeline
        "text_length": len(text),
        "buttons_count": len(buttons),
        "adapted_payload": telegram_payload,
        "note": "Message prepared for webhook delivery"
    }


async def execute_send_media(action: Dict[str, Any], action_id: str) -> Dict[str, Any]:
    """
    Executa a√ß√£o de envio de m√≠dia.
    TODO: Implementar envio real de fotos/v√≠deos.
    
    Args:
        action: Defini√ß√£o da a√ß√£o
        action_id: ID da a√ß√£o
        
    Returns:
        Resultado do envio
    """
    media = action.get("media", {})
    caption = action.get("text", "")
    
    # TODO: Implementar envio real de m√≠dia
    
    return {
        "media_sent": True,
        "media_type": media.get("type", "unknown"),
        "caption_length": len(caption)
    }


async def execute_set_facts(
    action: Dict[str, Any], 
    action_id: str, 
    db: Optional[Session] = None,
    metadata: Optional[Dict[str, Any]] = None
) -> Dict[str, Any]:
    """
    Executa a√ß√£o de defini√ß√£o de fatos no perfil do lead.
    
    Args:
        action: Defini√ß√£o da a√ß√£o
        action_id: ID da a√ß√£o  
        db: Sess√£o do banco
        metadata: Metadata do plano (para obter lead_id)
        
    Returns:
        Resultado da defini√ß√£o dos fatos
    """
    set_facts = action.get("set_facts", {})
    
    if not set_facts:
        return {"facts_updated": 0}
    
    try:
        # Extrair lead_id do metadata
        lead_id = (metadata or {}).get("lead_id")
        if not lead_id or not db:
            logger.warning(f"Missing lead_id ({lead_id}) or db for set_facts")
            return {
                "facts_updated": 0,
                "facts": set_facts,
                "status": "skipped",
                "reason": "missing_lead_id_or_db"
            }
        
        from app.data.repo import LeadRepository
        repo = LeadRepository(db)
        
        # Atualizar perfil com os fatos
        # set_facts pode ter formato "agreements.can_deposit": true
        # ent√£o precisamos converter para nested dict
        profile_updates = {}
        for key, value in set_facts.items():
            if "." in key:
                # Converter "agreements.can_deposit" para {"agreements": {"can_deposit": true}}
                parts = key.split(".")
                current = profile_updates
                for part in parts[:-1]:
                    if part not in current:
                        current[part] = {}
                    current = current[part]
                current[parts[-1]] = value
            else:
                profile_updates[key] = value
        
        # Atualizar perfil
        repo.update_profile_facts(lead_id, profile_updates)
        
        logger.info(f"üìù [SetFacts] Updated facts for lead {lead_id}: {set_facts}")
        
        return {
            "facts_updated": len(set_facts),
            "facts": set_facts,
            "status": "success",
            "lead_id": lead_id
        }
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error setting facts: {error_msg}")
        return {
            "facts_updated": 0,
            "facts": set_facts,
            "status": "error",
            "error": error_msg
        }


async def execute_track_event(
    action: Dict[str, Any], 
    action_id: str,
    db: Optional[Session] = None
) -> Dict[str, Any]:
    """
    Executa a√ß√£o de rastreamento de evento.
    
    Args:
        action: Defini√ß√£o da a√ß√£o
        action_id: ID da a√ß√£o
        db: Sess√£o do banco
        
    Returns:
        Resultado do rastreamento
    """
    track = action.get("track", {})
    
    if not track or not db:
        return {"event_tracked": False}
    
    # TODO: Implementar rastreamento real
    # event_repo = EventRepository(db)
    # event_repo.log_event(lead_id, track.get("event"), track)
    
    return {
        "event_tracked": True,
        "event_type": track.get("event", "unknown")
    }


async def execute_clear_waiting(
    action: Dict[str, Any], 
    action_id: str,
    metadata: Optional[Dict[str, Any]] = None
) -> Dict[str, Any]:
    """
    Executa a√ß√£o de limpar estado de aguardando confirma√ß√£o.
    
    Args:
        action: Defini√ß√£o da a√ß√£o
        action_id: ID da a√ß√£o
        metadata: Metadata do plano (para obter lead_id)
        
    Returns:
        Resultado da execu√ß√£o
    """
    try:
        from app.core.contexto_lead import get_contexto_lead_service
        
        lead_id = (metadata or {}).get("lead_id")
        if not lead_id:
            return {
                "status": "error",
                "error": "lead_id not found in metadata"
            }
        
        contexto_service = get_contexto_lead_service()
        await contexto_service.limpar_aguardando(lead_id)
        
        logger.info(f"üßπ [ClearWaiting] Cleared waiting state for lead {lead_id}")
        
        return {
            "status": "success",
            "cleared": True,
            "lead_id": lead_id
        }
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error clearing waiting state: {error_msg}")
        return {
            "status": "error",
            "error": error_msg
        }


async def execute_generic_action(action: Dict[str, Any], action_id: str) -> Dict[str, Any]:
    """
    Executa a√ß√£o gen√©rica n√£o reconhecida.
    
    Args:
        action: Defini√ß√£o da a√ß√£o
        action_id: ID da a√ß√£o
        
    Returns:
        Resultado da execu√ß√£o
    """
    return {
        "executed": True,
        "note": "Generic action executed as placeholder"
    }


async def check_idempotency(key: str, db: Session) -> Optional[Dict[str, Any]]:
    """
    Verifica se j√° existe resposta para chave de idempot√™ncia.
    
    Args:
        key: Chave de idempot√™ncia
        db: Sess√£o do banco
        
    Returns:
        Resposta cacheada ou None
    """
    try:
        idempotency_repo = IdempotencyRepository(db)
        return idempotency_repo.get_response(key)
    except Exception as e:
        logger.warning(f"Erro ao verificar idempot√™ncia: {str(e)}")
        return None


async def store_idempotency_response(key: str, response: Dict[str, Any], db: Session):
    """
    Armazena resposta para chave de idempot√™ncia.
    
    Args:
        key: Chave de idempot√™ncia
        response: Resposta a ser armazenada
        db: Sess√£o do banco
    """
    try:
        idempotency_repo = IdempotencyRepository(db)
        idempotency_repo.store_response(key, response)
    except Exception as e:
        logger.warning(f"Erro ao armazenar idempot√™ncia: {str(e)}")


def normalizar_action_para_envio(action: Dict[str, Any]) -> Dict[str, Any]:
    """
    Normaliza action para blindar envio contra nulos e bot√µes inv√°lidos.
    
    Args:
        action: Action original
        
    Returns:
        Action normalizada e segura
    """
    # Criar c√≥pia da action
    action_normalizada = action.copy()
    
    # Normalizar campos b√°sicos
    action_normalizada["text"] = action.get("text") or ""
    action_normalizada["buttons"] = action.get("buttons") or []
    action_normalizada["media"] = action.get("media") or []
    
    # Validar e filtrar bot√µes
    buttons_validados = []
    for botao in action_normalizada["buttons"]:
        if not isinstance(botao, dict):
            logger.warning(f"Bot√£o inv√°lido ignorado: {botao}")
            continue
        
        # Validar campos obrigat√≥rios
        if not botao.get("label"):
            logger.warning(f"Bot√£o sem label ignorado: {botao}")
            continue
        
        tipo = botao.get("kind", "callback")
        if tipo not in ["callback", "url", "quick_reply"]:
            logger.warning(f"Tipo de bot√£o inv√°lido '{tipo}', usando 'callback'")
            tipo = "callback"
        
        # Validar URL se necess√°rio
        if tipo == "url" and not botao.get("url"):
            logger.warning(f"Bot√£o URL sem URL ignorado: {botao}")
            continue
        
        # Bot√£o v√°lido
        botao_validado = {
            "id": botao.get("id", f"btn_{len(buttons_validados)}"),
            "label": botao["label"],
            "kind": tipo
        }
        
        # Adicionar campos opcionais se presentes
        if "url" in botao:
            botao_validado["url"] = botao["url"]
        if "set_facts" in botao:
            botao_validado["set_facts"] = botao["set_facts"]
        if "track" in botao:
            botao_validado["track"] = botao["track"]
        
        buttons_validados.append(botao_validado)
    
    action_normalizada["buttons"] = buttons_validados
    
    # Normalizar m√≠dia
    media_validada = []
    for item_media in action_normalizada["media"]:
        if not isinstance(item_media, dict):
            logger.warning(f"Item de m√≠dia inv√°lido ignorado: {item_media}")
            continue
        
        kind = item_media.get("kind")
        url = item_media.get("url")
        
        if not kind or kind not in ["photo", "video", "document"]:
            logger.warning(f"Tipo de m√≠dia inv√°lido ignorado: {kind}")
            continue
        
        if not url:
            logger.warning(f"Item de m√≠dia sem URL ignorado: {item_media}")
            continue
        
        media_validada.append({
            "kind": kind,
            "url": url,
            "caption": item_media.get("caption", "")
        })
    
    action_normalizada["media"] = media_validada
    
    logger.debug(f"Action normalizada: {len(buttons_validados)} bot√µes, {len(media_validada)} m√≠dias")
    return action_normalizada
